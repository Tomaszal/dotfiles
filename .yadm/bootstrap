#!/bin/sh

# Available script functions and names
# Do not change the order or it will break the bootstrap history file
script_names[1]="Arch"
script_funcs[1]="bootstrap_arch"

function bootstrap_arch() {

    packages=(
        "chromium"
    )

    aur_packages=(
        "yadm-git"
    )

    echo
    echo "--> Updating the system..."
    echo

    pacman --noconfirm -Syyu

    if ! [ ${#packages[@]} = 0 ]; then
        echo
        echo "--> Installing official packages..."
        echo

        pacman --noconfirm -S "${packages[@]}"
    fi

    if ! [ -x "$(command -v pamac)" ]; then
        echo
        echo "--> Installing Pamac..."
        echo

        pamac_folder="$HOME/.pamac-aur"
        sudo -u "$OG_USER" git clone "https://aur.archlinux.org/pamac-aur.git" "$pamac_folder"
        cd "$pamac_folder"
        sudo -u "$OG_USER" makepkg --noconfirm -si
        rm -rf "$pamac_folder"
        cd "$HOME"
    else
        echo
        echo "--> Pamac is already installed, skipping..."
    fi

    if ! [ ${#aur_packages[@]} = 0 ]; then
        echo
        echo "--> Installing AUR packages..."
        echo

        sudo -u "$OG_USER" pamac build --no-confirm "${aur_packages[@]}"
    fi

}

function bootstrap_select() {

    [ -z ${script_names[$1]} ] && return 100

    # All scripts must have a function associated with them
    if [ -z ${script_funcs[$1]} ]; then
        ech >&2 "Error: malformed bootstrap script, '${script_names[$1]}' has no associated function."
    fi

    # Save the chosen script index for subsequent bootstrap runs
    mkdir -p ~/.yadm
    echo $1 >~/.yadm/bootstrap_history

    echo
    echo "Executing ${script_names[1]} bootstrap..."

    ${script_funcs[1]}

}

function init() {

    # Check if run as root, if not request sudo access
    [ $(id -u) = 0 ] || exec sudo "$0" "$USER"

    # When running as root a user must be provided as an argument
    if [ -z $1 ]; then
        echo >&2 "Error: no \$HOME provided."
        exit 1
    else
        OG_USER="$1"
        HOME=$(eval echo "~$OG_USER")
    fi

}

function main() {

    init "$@"

    echo
    echo "Welcome to dotfile bootstrap!"

    # Try getting and running the bootstrap history
    if [ -f ~/.yadm/bootstrap_history ]; then
        script="$(cat ~/.yadm/bootstrap_history)"
        bootstrap_select "$script"

        if [ ! $? = 100 ]; then
            [ $? = 0 ] || return $?
            return 0
        fi
    fi

    while true; do
        echo
        echo "Available bootstrap scripts:"
        echo

        # Show indexed script names
        for i in "${!script_names[@]}"; do
            echo "  $i. ${script_names[$i]}"
        done

        echo "  0. Exit"
        echo

        read -r -p "Which script do you want to run? [0-${#script_names[@]}] (0): " script </dev/tty

        # Exit the script if necessary
        [ -z $script ] || [ $script = 0 ] && return 0

        bootstrap_select $script

        if [ ! $? = 100 ]; then
            [ $? = 0 ] || return $?
            return 0
        fi
    done

}

main "$@"
